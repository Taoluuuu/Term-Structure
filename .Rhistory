ggplot(aes(x=index, y=Rate, color=NSTenor))+geom_line()+facet_wrap(~curve)+theme_bw()
step <- 1/12
maturities <- seq(step, 10, step)
fitted.curves %>%
select(curve, index, beta_0, beta_1, beta_2, lambda) %>%
nest(-curve) %>%
mutate(Params = map(data, tk_xts),
Rates = map(Params, NSrates, maturity=maturities),
Rates = map(Rates, tk_tbl)) %>%
select(-Params, -data) %>%
unnest ->
rates.df
rates.df %>% select(curve, index, X2, X5, X10) %>% gather(Tenor, Rate, X2, X5, X10) %>%  ggplot(aes(x=index, y=Rate, color=Tenor))+geom_line()+facet_wrap(~curve)+theme_bw()
rates.df %>%
nest(-curve) %>%
mutate(ex.ret = map(data, function(x) {
rates <- x %>% select(-index) %>% data.matrix
#rates <- rates/100
logprices <- -sweep(rates, 2, as.array(maturities), "*")
#excess return, denoted x in the paper:
ex.ret = logprices[-1, -ncol(logprices)]-logprices[-nrow(logprices), -1]-logprices[-nrow(logprices), 1]
ex.ret = bind_cols(select(x[-1,], index), tk_tbl(ex.ret))
}),
pca_obj = map(data, ~select(., -index) %>% prcomp(center=TRUE)),
pc = map2(data, pca_obj, ~.x %>% select(index) %>% cbind(.y$x)),
charts = map2(pca_obj, curve, ~.x %>% fviz_eig+ggtitle(.y))) ->
pca.decomp
pca.decomp$charts %>% grid.arrange(grobs=.)
#take a look at the excess return of USD 10y to see if it makes sense
pca.decomp %>% filter(curve == "USD") %>% select(data) %>% unnest() -> USD10Y
USD10Y %>% select(index, X10) %>% ggplot(aes(x = index, y = X10)) + geom_line()
#rates
rates.df %>% filter(curve == "USD") %>% select(index, X0.25) -> ratesUSD
#bond prices
#{rates.df %>% nest(-curve) %>% mutate(logpr = map(data, ~select(., -index) %>% data.matrix %>% {exp(-sweep(., 2, maturities, "*"))}))}$logpr[[1]]
#steps coincide with the steps in file:///T:/v-niarti/Articles/ACM%20model.pdf and file:///T:/v-niarti/2017-10-20.%20Term%20premium/ACM%20example.pdf. Second paper has some typos, mostly omitted transposition signs
pca.decomp %>%
mutate(factors = map(pc, select, index, PC1:PC4),
mts = map(factors, ~tk_ts(., start=decimal_date(floor_date(first(.$index), 'months')), frequency=12)),
VARs = map(mts, VAR),
Phi = map(VARs, ~coef(.) %>% map(~.[,'Estimate']) %>% do.call(rbind, .)),
mu = map(Phi, ~.[,'const']),
Phi = map(Phi, ~tk_tbl(.) %>% select(., -const, -index) %>% data.matrix),
var.resid = map(VARs, ~residuals(.)),
resid.cov = map(var.resid, cov),
var.resid = map2(var.resid, factors, ~bind_cols(.y[-1, "index", drop=FALSE], tk_tbl(.x) %>% setNames(paste0("PC", 1:4, ".resid"))))
) ->
step.one
step.one %>%
mutate(reg.df = pmap(list(ex.ret, factors, var.resid),
function(x, y, z) x %>%
left_join(mutate_if(y, is.numeric, lag) %>%
setNames(c('index', paste0(colnames(.)[-1], ".lagged")))) %>%
left_join(z)),
x = map(reg.df, ~select(., contains("PC")) %>% add_column(intercept=rep(1, nrow(.)), .before=1) %>% data.matrix),
y = map(reg.df, ~select(., contains("X"), -index) %>% data.matrix),
reg = map2(x, y, lm.fit),
a_hat = map(reg, ~t(.$coefficients["intercept",])),
c_hat = map(reg, ~t(.$coefficients[paste0("PC",1:4,".lagged"),])),
beta_hat = map(reg, ~.$coefficients[paste0("PC",1:4,".resid"),]),
#sigma_hat = map(reg, ~.$residuals %>% {.%*%t(.)} %>% {mean(diag(.))}),
sigma_hat = map(reg, ~.$residuals %>% {t(.)%*%./(nrow(.)*ncol(.))} %>% {sqrt(sum(diag(.)))}),
B_star = map(beta_hat, ~t(apply(., 2, function(x) as.vector(x%*%t(x)))))
) ->
step.two
step.two %>%
mutate(
lambda1_hat = map2(beta_hat, c_hat, ~solve(.x%*%t(.x), .x%*%.y)),
lambda0_hat = pmap(list(beta_hat, a_hat, B_star, resid.cov, sigma_hat), function(beta, a, B, resid.cov, sigma) solve(beta%*%t(beta), beta%*%(t(a)+.5*(B%*%as.vector(resid.cov)+sigma^2))))
) ->
step.three
#we need two more parameters: delta0 and delta1 (for the short rate model) before we can plug everything into recursive equations.
step.three %>%
mutate(deltas = map2(data, factors, ~.x %>% select(1:2) %>% setNames(c('index', 'sr')) %>% left_join(.y) %>% lm(sr~PC1+PC2+PC3+PC4, data=.) %>% .$coef)) ->
recur.input
#!!!!!!!!!!!! The problem most likely to be below: A and B oscillate in values as tenor increases, what seems strange to me !!!!!!!!!!!!!!!!!!!!!!!!!!#
# recursive equations as in the papers
AB.recursion <- function(mu, lambda0, lambda1, sigma, resid.cov, deltas, Phi, rn=FALSE) {
nfactors <- lambda1 %>% dim %>% .[1]
A = 0; Bt = rep(0, nfactors) %>% t
# remove premia if we need risk neutral calculation:
if (rn==TRUE) {
lambda0 <- 0; lambda1 <- 0
}
delta0 <- deltas['(Intercept)']
delta1 <- deltas[setdiff(names(deltas), '(Intercept)')]
params <- matrix(c(n=0, tenor=0, A=A, Bt=Bt), 1, 3+nfactors)
for (n in 1:length(maturities)) {
A = A + Bt%*%(mu-lambda0) +.5*(Bt%*%resid.cov%*%t(Bt)+sigma^2) - delta0
Bt = sweep(Bt%*%(Phi-lambda1), 2, delta1, "-")
params <- rbind(params, c(n=n, tenor=n*step, A=A, Bt=Bt))
}
params
}
#go from A and B derived via recursions to zero yields
ABtoZY <- function(params, factors) {
X <- factors %>% select(-index) %>% data.matrix
nfactors <- X %>% dim %>% .[2]
A <- params[,'A']
Bt <- params[,paste0('Bt',1:nfactors)]
tenor <- params[,'tenor']
r = tibble(index=factors$index) %>% bind_cols({sweep(-(A+X%*%t(Bt)), 2, as.array(tenor), "/")} %>% set_colnames(c(0, 1:length(maturities))) %>% tk_tbl)
}
recur.input %>%
mutate(
params = pmap(list(mu, lambda0_hat, lambda1_hat, sigma_hat, resid.cov, deltas, Phi), AB.recursion),
params_riskneutral = pmap(list(mu, lambda0_hat, lambda1_hat, sigma_hat, resid.cov, deltas, Phi, TRUE), AB.recursion),# -> temp,
curve_fitted = map2(params, factors, ABtoZY),
curve_rn = map2(params_riskneutral, factors, ABtoZY),
term.premium = map2(curve_fitted, curve_rn, ~.x %>% gather(tenor, rate, -index) %>% left_join(gather(.y, tenor, rate, -index), by=c('index', 'tenor'), suffix=c('.fitted', '.rn')) %>% mutate(term.pr=rate.fitted-rate.rn))
) -> term.premiums
#df dates + rates for different tenors, USD curve as an example
term.premiums$term.premium[[1]] %>% select(-rate.fitted, -rate.rn) %>% spread(tenor, term.pr) %>% select_at(c('index', 1:40)) -> term.premiums.df
#fitted curves, USD curve as an example
term.premiums$term.premium[[1]] %>% select(-rate.rn, -term.pr) %>% spread(tenor, rate.fitted) %>% select_at(c('index', 1:40)) -> rates.fitted.df
ggplot(rates.fitted.df,aes(x=rates.fitted.df$index, y = rates.fitted.df[,"20"]))+geom_line()+theme_bw()
#risk neutral curves, USD curve as an example
term.premiums$term.premium[[1]] %>% select(-rate.fitted, -term.pr) %>% spread(tenor, rate.rn) %>% select_at(c('index', 1:40)) -> rates.rn.df
#debug
#AB.recursion(recur.input$mu[[1]], recur.input$lambda0_hat[[1]], recur.input$lambda1_hat[[1]], recur.input$sigma_hat[[1]], recur.input$resid.cov[[1]], recur.input$deltas[[1]], recur.input$Phi[[1]])
rates.fitted.df %>% tail
ggplot(as_data_frame(term.premiums$params[[1]]),aes(x=term.premiums$params[[1]][,'n'], y = term.premiums$params[[1]][,"A"]))+geom_line()+theme_bw()
as_data_frame(term.premiums$params[[1]]) %>% select(-n) %>%  gather(Param, Value, -tenor) %>%
ggplot(aes(x=tenor,y=Value))+geom_line() + facet_wrap(~Param)+ theme_bw()
recur.input$lambda1_hat[[4]]
recur.input$lambda0_hat
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE
)
library(vars)
library(tidyquant)
library(Rblpapi)
library(stringr)
library(YieldCurve)
library(timetk)
library(magrittr)
library(multidplyr)
library(factoextra)
library(gridExtra)
#library(RQuantLib)
blpConnect()
Bench.rates <- tribble(
~Tenor, ~USD, ~GBP, ~JPY, ~EUR,
'3M', 'I02503M Index', 'I02203M Index', 'I01803M Index', 'F91003M Index',
'6M', 'I02506M Index', 'I02206M Index', 'I01806M Index', 'F91006M Index',
'1Y', 'I02501Y Index', 'I02201Y Index', 'I01801Y Index', 'F91001Y Index',
'2Y', 'I02502Y Index', 'I02202Y Index', 'I01802Y Index', 'F91002Y Index',
'3Y', 'I02503Y Index', 'I02203Y Index', 'I01803Y Index', 'F91003Y Index',
'4Y', 'I02504Y Index', 'I02204Y Index', 'I01804Y Index', 'F91004Y Index',
'5Y', 'I02505Y Index', 'I02205Y Index', 'I01805Y Index', 'F91005Y Index',
'6Y', 'I02506Y Index', 'I02206Y Index', 'I01806Y Index', 'F91006Y Index',
'7Y', 'I02507Y Index', 'I02207Y Index', 'I01807Y Index', 'F91007Y Index',
'8Y', 'I02508Y Index', 'I02208Y Index', 'I01808Y Index', 'F91008Y Index',
'9Y', 'I02509Y Index', 'I02209Y Index', 'I01809Y Index', 'F91009Y Index',
'10Y', 'I02510Y Index', 'I02210Y Index', 'I01810Y Index', 'F91010Y Index',
'15Y', 'I02515Y Index', 'I02215Y Index', 'I01815Y Index', 'F91015Y Index',
'20Y', 'I02520Y Index', 'I02220Y Index', 'I01820Y Index', 'F91020Y Index',
'30Y', 'I02530Y Index', 'I02230Y Index', 'I01830Y Index', 'F91030Y Index'
)
Bench.rates %>%
gather(curve, ticker, -Tenor) %>%
mutate(TTM = case_when(Tenor == '3M' ~ 0.25,
Tenor == '6M' ~ 0.5,
TRUE ~ as.numeric(str_sub(Tenor, end = -2)))) ->
tickers.ref
tickers.ref %>%
pull(ticker) %>%
bdh("PX_LAST", start.date=ymd("2000-01-01"), end.date=Sys.Date(), options=c("periodicitySelection" = "MONTHLY")) %>%
enframe %>%
right_join(tickers.ref, by=c('name'='ticker')) %>%
unnest %>%
rename(ticker=name) ->
rate.hist
rate.hist %>%
select(-Tenor, -ticker) %>%
spread(TTM, PX_LAST) ->
rate.frame
tickers.ref %>% pull(TTM) %>% unique %>% sort -> tenors
rate.frame %>%
nest(-curve) %>%
partition(cluster=get_default_cluster() %>% cluster_copy(tenors) %>% cluster_library((.packages()))) %>%
mutate(data = map(data, ~tk_xts(.) %>% {./100}),
NSParam = map(data, Nelson.Siegel, maturity=tenors),
NS2y = map(NSParam, NSrates, maturity=2),
NS2y = map(NS2y, setNames, nm='tenor_02y'),
NS5y = map(NSParam, NSrates, maturity=5),
NS5y = map(NS5y, setNames, nm='tenor_05y'),
NS10y = map(NSParam, NSrates, maturity=10),
NS10y = map(NS10y, setNames, nm='tenor_10y'),
fitted = pmap(list(data, NSParam, NS2y, NS5y, NS10y), merge),
fitted = map(fitted, tk_tbl)
) %>%
select(-data, -NSParam, -NS2y, -NS5y, -NS10y) %>%
collect %>%
ungroup %>%
unnest ->
fitted.curves
fitted.curves %>%
gather(NSTenor, Rate, tenor_02y, tenor_05y, tenor_10y) %>%
ggplot(aes(x=index, y=Rate, color=NSTenor))+geom_line()+facet_wrap(~curve)+theme_bw()
step <- 1/12
maturities <- seq(step, 10, step)
fitted.curves %>%
select(curve, index, beta_0, beta_1, beta_2, lambda) %>%
nest(-curve) %>%
mutate(Params = map(data, tk_xts),
Rates = map(Params, NSrates, maturity=maturities),
Rates = map(Rates, tk_tbl)) %>%
select(-Params, -data) %>%
unnest ->
rates.df
rates.df %>%
nest(-curve) %>%
mutate(ex.ret = map(data, function(x) {
rates <- x %>% select(-index) %>% data.matrix
#rates <- rates/100
logprices <- -sweep(rates, 2, as.array(maturities), "*")
#excess return, denoted x in the paper:
ex.ret = logprices[-1, -ncol(logprices)]-logprices[-nrow(logprices), -1]-rates[-nrow(logprices), 1]
ex.ret = bind_cols(select(x[-1,], index), tk_tbl(ex.ret))
}),
pca_obj = map(data, ~select(., -index) %>% prcomp(center=TRUE)),
pc = map2(data, pca_obj, ~.x %>% select(index) %>% cbind(.y$x)),
charts = map2(pca_obj, curve, ~.x %>% fviz_eig+ggtitle(.y))) ->
pca.decomp
pca.decomp$charts %>% grid.arrange(grobs=.)
#bond prices
#{rates.df %>% nest(-curve) %>% mutate(logpr = map(data, ~select(., -index) %>% data.matrix %>% {exp(-sweep(., 2, maturities, "*"))}))}$logpr[[1]]
#steps coincide with the steps in file:///T:/v-niarti/Articles/ACM%20model.pdf and file:///T:/v-niarti/2017-10-20.%20Term%20premium/ACM%20example.pdf. Second paper has some typos, mostly omitted transposition signs
pca.decomp %>%
mutate(factors = map(pc, select, index, PC1:PC4),
mts = map(factors, ~tk_ts(., start=decimal_date(floor_date(first(.$index), 'months')), frequency=12)),
VARs = map(mts, VAR),
Phi = map(VARs, ~coef(.) %>% map(~.[,'Estimate']) %>% do.call(rbind, .)),
mu = map(Phi, ~.[,'const']),
Phi = map(Phi, ~tk_tbl(.) %>% select(., -const, -index) %>% data.matrix),
var.resid = map(VARs, ~residuals(.)),
resid.cov = map(var.resid, cov),
var.resid = map2(var.resid, factors, ~bind_cols(.y[-1, "index", drop=FALSE], tk_tbl(.x) %>% setNames(paste0("PC", 1:4, ".resid"))))
) ->
step.one
step.one %>%
mutate(reg.df = pmap(list(ex.ret, factors, var.resid),
function(x, y, z) x %>%
left_join(mutate_if(y, is.numeric, lag) %>%
setNames(c('index', paste0(colnames(.)[-1], ".lagged")))) %>%
left_join(z)),
x = map(reg.df, ~select(., contains("PC")) %>% add_column(intercept=rep(1, nrow(.)), .before=1) %>% data.matrix),
y = map(reg.df, ~select(., contains("X"), -index) %>% data.matrix),
reg = map2(x, y, lm.fit),
a_hat = map(reg, ~t(.$coefficients["intercept",])),
c_hat = map(reg, ~t(.$coefficients[paste0("PC",1:4,".lagged"),])),
beta_hat = map(reg, ~.$coefficients[paste0("PC",1:4,".resid"),]),
sigma_hat = map(reg, ~.$residuals %>% {.%*%t(.)} %>% {mean(diag(.))}),
B_star = map(beta_hat, ~t(apply(., 2, function(x) as.vector(x%*%t(x)))))
) ->
step.two
step.two %>%
mutate(
lambda1_hat = map2(beta_hat, c_hat, ~solve(.x%*%t(.x), .x%*%.y)),
lambda0_hat = pmap(list(beta_hat, a_hat, B_star, resid.cov, sigma_hat), function(beta, a, B, resid.cov, sigma) solve(beta%*%t(beta), beta%*%(t(a)+.5*(B%*%as.vector(resid.cov)+sigma^2))))
) ->
step.three
#we need two more parameters: delta0 and delta1 (for the short rate model) before we can plug everything into recursive equations.
step.three %>%
mutate(deltas = map2(data, factors, ~.x %>% select(1:2) %>% setNames(c('index', 'sr')) %>% left_join(.y) %>% lm(sr~PC1+PC2+PC3+PC4, data=.) %>% .$coef)) ->
recur.input
#!!!!!!!!!!!! The problem most likely to be below: A and B oscillate in values as tenor increases, what seems strange to me !!!!!!!!!!!!!!!!!!!!!!!!!!#
# recursive equations as in the papers
AB.recursion <- function(mu, lambda0, lambda1, sigma, resid.cov, deltas, Phi, rn=FALSE) {
nfactors <- lambda1 %>% dim %>% .[1]
A = 0; Bt = rep(0, nfactors) %>% t
# remove premia if we need risk neutral calculation:
if (rn==TRUE) {
lambda0 <- 0; lambda1 <- 0
}
delta0 <- deltas['(Intercept)']
delta1 <- deltas[setdiff(names(deltas), '(Intercept)')]
params <- matrix(c(n=0, tenor=0, A=A, Bt=Bt), 1, 3+nfactors)
for (n in 1:length(maturities)) {
A = A + Bt%*%(mu-lambda0) +.5*(Bt%*%resid.cov%*%t(Bt)+sigma^2) - delta0
Bt = sweep(Bt%*%(Phi-lambda1), 2, delta1, "-")
params <- rbind(params, c(n=n, tenor=n*step, A=A, Bt=Bt))
}
params
}
#go from A and B derived via recursions to zero yields
ABtoZY <- function(params, factors) {
X <- factors %>% select(-index) %>% data.matrix
nfactors <- X %>% dim %>% .[2]
A <- params[,'A']
Bt <- params[,paste0('Bt',1:nfactors)]
tenor <- params[,'tenor']
r = tibble(index=factors$index) %>% bind_cols({sweep(-(A+X%*%t(Bt)), 2, as.array(tenor), "/")} %>% set_colnames(c(0, 1:length(maturities))) %>% tk_tbl)
}
recur.input %>%
mutate(
params = pmap(list(mu, lambda0_hat, lambda1_hat, sigma_hat, resid.cov, deltas, Phi), AB.recursion),
params_riskneutral = pmap(list(mu, lambda0_hat, lambda1_hat, sigma_hat, resid.cov, deltas, Phi, TRUE), AB.recursion),# -> temp,
curve_fitted = map2(params, factors, ABtoZY),
curve_rn = map2(params_riskneutral, factors, ABtoZY),
term.premium = map2(curve_fitted, curve_rn, ~.x %>% gather(tenor, rate, -index) %>% left_join(gather(.y, tenor, rate, -index), by=c('index', 'tenor'), suffix=c('.fitted', '.rn')) %>% mutate(term.pr=rate.fitted-rate.rn))
) -> term.premiums
#df dates + rates for different tenors, USD curve as an example
term.premiums$term.premium[[1]] %>% select(-rate.fitted, -rate.rn) %>% spread(tenor, term.pr) %>% select_at(c('index', 1:120)) -> term.premiums.df
#fitted curves, USD curve as an example
term.premiums$term.premium[[1]] %>% select(-rate.rn, -term.pr) %>% spread(tenor, rate.fitted) %>% select_at(c('index', 1:120)) -> rates.fitted.df
#risk neutral curves, USD curve as an example
term.premiums$term.premium[[1]] %>% select(-rate.fitted, -term.pr) %>% spread(tenor, rate.rn) %>% select_at(c('index', 1:120)) -> rates.rn.df
#debug
#AB.recursion(recur.input$mu[[1]], recur.input$lambda0_hat[[1]], recur.input$lambda1_hat[[1]], recur.input$sigma_hat[[1]], recur.input$resid.cov[[1]], recur.input$deltas[[1]], recur.input$Phi[[1]])
rates.fitted.df %>% tail
ggplot(as_data_frame(term.premiums$params[[1]]),aes(x=term.premiums$params[[1]][,'n'], y = term.premiums$params[[1]][,"A"]))+geom_line()+theme_bw()
as_data_frame(term.premiums$params[[1]]) %>% select(-n) %>%  gather(Param, Value, -tenor) %>%
ggplot(aes(x=tenor,y=Value))+geom_line() + facet_wrap(~Param)+ theme_bw()
term.premiums.df
term.premiums.df %>% tail(5)
rates.fitted.df %>% tail(5)
step.one %>%
mutate(reg.df = pmap(list(ex.ret, factors, var.resid),
function(x, y, z) x %>%
left_join(mutate_if(y, is.numeric, lag) %>%
setNames(c('index', paste0(colnames(.)[-1], ".lagged")))) %>%
left_join(z)),
x = map(reg.df, ~select(., contains("PC")) %>% add_column(intercept=rep(1, nrow(.)), .before=1) %>% data.matrix),
y = map(reg.df, ~select(., contains("X"), -index) %>% data.matrix),
reg = map2(x, y, lm.fit),
a_hat = map(reg, ~t(.$coefficients["intercept",])),
c_hat = map(reg, ~t(.$coefficients[paste0("PC",1:4,".lagged"),])),
beta_hat = map(reg, ~.$coefficients[paste0("PC",1:4,".resid"),]),
sigma_hat = map(reg, ~.$residuals %>% {.%*%t(.)} %>% {sqrt(mean(diag(.)))}),
B_star = map(beta_hat, ~t(apply(., 2, function(x) as.vector(x%*%t(x)))))
) ->
step.two
step.two %>%
mutate(
lambda1_hat = map2(beta_hat, c_hat, ~solve(.x%*%t(.x), .x%*%.y)),
lambda0_hat = pmap(list(beta_hat, a_hat, B_star, resid.cov, sigma_hat), function(beta, a, B, resid.cov, sigma) solve(beta%*%t(beta), beta%*%(t(a)+.5*(B%*%as.vector(resid.cov)+sigma^2))))
) ->
step.three
step.three %>%
mutate(deltas = map2(data, factors, ~.x %>% select(1:2) %>% setNames(c('index', 'sr')) %>% left_join(.y) %>% lm(sr~PC1+PC2+PC3+PC4, data=.) %>% .$coef)) ->
recur.input
AB.recursion <- function(mu, lambda0, lambda1, sigma, resid.cov, deltas, Phi, rn=FALSE) {
nfactors <- lambda1 %>% dim %>% .[1]
A = 0; Bt = rep(0, nfactors) %>% t
# remove premia if we need risk neutral calculation:
if (rn==TRUE) {
lambda0 <- 0; lambda1 <- 0
}
delta0 <- deltas['(Intercept)']
delta1 <- deltas[setdiff(names(deltas), '(Intercept)')]
params <- matrix(c(n=0, tenor=0, A=A, Bt=Bt), 1, 3+nfactors)
for (n in 1:length(maturities)) {
A = A + Bt%*%(mu-lambda0) +.5*(Bt%*%resid.cov%*%t(Bt)+sigma^2) - delta0
Bt = sweep(Bt%*%(Phi-lambda1), 2, delta1, "-")
params <- rbind(params, c(n=n, tenor=n*step, A=A, Bt=Bt))
}
params
}
ABtoZY <- function(params, factors) {
X <- factors %>% select(-index) %>% data.matrix
nfactors <- X %>% dim %>% .[2]
A <- params[,'A']
Bt <- params[,paste0('Bt',1:nfactors)]
tenor <- params[,'tenor']
r = tibble(index=factors$index) %>% bind_cols({sweep(-(A+X%*%t(Bt)), 2, as.array(tenor), "/")} %>% set_colnames(c(0, 1:length(maturities))) %>% tk_tbl)
}
recur.input %>%
mutate(
params = pmap(list(mu, lambda0_hat, lambda1_hat, sigma_hat, resid.cov, deltas, Phi), AB.recursion),
params_riskneutral = pmap(list(mu, lambda0_hat, lambda1_hat, sigma_hat, resid.cov, deltas, Phi, TRUE), AB.recursion),# -> temp,
curve_fitted = map2(params, factors, ABtoZY),
curve_rn = map2(params_riskneutral, factors, ABtoZY),
term.premium = map2(curve_fitted, curve_rn, ~.x %>% gather(tenor, rate, -index) %>% left_join(gather(.y, tenor, rate, -index), by=c('index', 'tenor'), suffix=c('.fitted', '.rn')) %>% mutate(term.pr=rate.fitted-rate.rn))
) -> term.premiums
term.premiums$term.premium[[1]] %>% select(-rate.fitted, -rate.rn) %>% spread(tenor, term.pr) %>% select_at(c('index', 1:120)) -> term.premiums.df
term.premiums.df %>% tail(5)
term.premiums$term.premium[[1]] %>% select(-rate.rn, -term.pr) %>% spread(tenor, rate.fitted) %>% select_at(c('index', 1:120)) -> rates.fitted.df
rates.fitted.df %>% tail(5)
term.premiums$term.premium[[1]] %>% select(-rate.fitted, -term.pr) %>% spread(tenor, rate.rn) %>% select_at(c('index', 1:120)) -> rates.rn.df
rates.fitted.df %>% tail(5)
ggplot(as_data_frame(term.premiums$params[[1]]),aes(x=term.premiums$params[[1]][,'n'], y = term.premiums$params[[1]][,"A"]))+geom_line()+theme_bw()
as_data_frame(term.premiums$params[[1]]) %>% select(-n) %>%  gather(Param, Value, -tenor) %>%
ggplot(aes(x=tenor,y=Value))+geom_line() + facet_wrap(~Param)+ theme_bw()
step.one %>%
mutate(reg.df = pmap(list(ex.ret, factors, var.resid),
function(x, y, z) x %>%
left_join(mutate_if(y, is.numeric, lag) %>%
setNames(c('index', paste0(colnames(.)[-1], ".lagged")))) %>%
left_join(z)),
x = map(reg.df, ~select(., contains("PC")) %>% add_column(intercept=rep(1, nrow(.)), .before=1) %>% data.matrix),
y = map(reg.df, ~select(., contains("X"), -index) %>% data.matrix),
reg = map2(x, y, lm.fit),
a_hat = map(reg, ~t(.$coefficients["intercept",])),
c_hat = map(reg, ~t(.$coefficients[paste0("PC",1:4,".lagged"),])),
beta_hat = map(reg, ~.$coefficients[paste0("PC",1:4,".resid"),]),
sigma_hat = map(reg, ~.$residuals %>% {t(.)%*%./(nrow(.)*ncol(.))} %>% {sqrt(sum(diag(.)))}),
B_star = map(beta_hat, ~t(apply(., 2, function(x) as.vector(x%*%t(x)))))
) ->
step.two
step.two %>%
mutate(
lambda1_hat = map2(beta_hat, c_hat, ~solve(.x%*%t(.x), .x%*%.y)),
lambda0_hat = pmap(list(beta_hat, a_hat, B_star, resid.cov, sigma_hat), function(beta, a, B, resid.cov, sigma) solve(beta%*%t(beta), beta%*%(t(a)+.5*(B%*%as.vector(resid.cov)+sigma^2))))
) ->
step.three
step.three %>%
mutate(deltas = map2(data, factors, ~.x %>% select(1:2) %>% setNames(c('index', 'sr')) %>% left_join(.y) %>% lm(sr~PC1+PC2+PC3+PC4, data=.) %>% .$coef)) ->
recur.input
AB.recursion <- function(mu, lambda0, lambda1, sigma, resid.cov, deltas, Phi, rn=FALSE) {
nfactors <- lambda1 %>% dim %>% .[1]
A = 0; Bt = rep(0, nfactors) %>% t
# remove premia if we need risk neutral calculation:
if (rn==TRUE) {
lambda0 <- 0; lambda1 <- 0
}
delta0 <- deltas['(Intercept)']
delta1 <- deltas[setdiff(names(deltas), '(Intercept)')]
params <- matrix(c(n=0, tenor=0, A=A, Bt=Bt), 1, 3+nfactors)
for (n in 1:length(maturities)) {
A = A + Bt%*%(mu-lambda0) +.5*(Bt%*%resid.cov%*%t(Bt)+sigma^2) - delta0
Bt = sweep(Bt%*%(Phi-lambda1), 2, delta1, "-")
params <- rbind(params, c(n=n, tenor=n*step, A=A, Bt=Bt))
}
params
}
ABtoZY <- function(params, factors) {
X <- factors %>% select(-index) %>% data.matrix
nfactors <- X %>% dim %>% .[2]
A <- params[,'A']
Bt <- params[,paste0('Bt',1:nfactors)]
tenor <- params[,'tenor']
r = tibble(index=factors$index) %>% bind_cols({sweep(-(A+X%*%t(Bt)), 2, as.array(tenor), "/")} %>% set_colnames(c(0, 1:length(maturities))) %>% tk_tbl)
}
recur.input %>%
mutate(
params = pmap(list(mu, lambda0_hat, lambda1_hat, sigma_hat, resid.cov, deltas, Phi), AB.recursion),
params_riskneutral = pmap(list(mu, lambda0_hat, lambda1_hat, sigma_hat, resid.cov, deltas, Phi, TRUE), AB.recursion),# -> temp,
curve_fitted = map2(params, factors, ABtoZY),
curve_rn = map2(params_riskneutral, factors, ABtoZY),
term.premium = map2(curve_fitted, curve_rn, ~.x %>% gather(tenor, rate, -index) %>% left_join(gather(.y, tenor, rate, -index), by=c('index', 'tenor'), suffix=c('.fitted', '.rn')) %>% mutate(term.pr=rate.fitted-rate.rn))
) -> term.premiums
term.premiums$term.premium[[1]] %>% select(-rate.fitted, -rate.rn) %>% spread(tenor, term.pr) %>% select_at(c('index', 1:120)) -> term.premiums.df
term.premiums.df %>% tail(5)
term.premiums$term.premium[[1]] %>% select(-rate.rn, -term.pr) %>% spread(tenor, rate.fitted) %>% select_at(c('index', 1:120)) -> rates.fitted.df
rates.fitted.df %>% tail(5)
term.premiums$term.premium[[1]] %>% select(-rate.fitted, -term.pr) %>% spread(tenor, rate.rn) %>% select_at(c('index', 1:120)) -> rates.rn.df
rates.fitted.df %>% tail(5)
as_data_frame(term.premiums$params[[1]]) %>% select(-n) %>%  gather(Param, Value, -tenor) %>%
ggplot(aes(x=tenor,y=Value))+geom_line() + facet_wrap(~Param)+ theme_bw()
pca.decomp$charts %>% grid.arrange(grobs=.)
step.one$factors[[4]]
fitted.curves
step.one$factors[[1]] %>% gather(PC, value, PC1, PC2, PC3, PC4 ) %>% ggplot(aes(x=index, y=value, color=PC))+geom_line()+theme_bw()
step.one$factors[[1]]
step.one$factors[[1]] %>% gather(PC, value, PC1, PC2, PC3, PC4 ) %>% ggplot(aes(x=index, y=value, color=PC))+geom_line()+theme_bw()
term.premiums$lambda0_hat
setwd("//riskview/Apps/taolu/Fixed Income/Yield Curve Model")
source('//riskview/Apps/taolu/Fixed Income/Yield Curve Model/Yield_Curve_JPM_2Y.R')
Series_combind %>% ggplot(aes(x = Date)) + geom_line(aes(y = residual_1mma)) + geom_line(aes(y = std_residual)) + geom_line(aes(y = -std_residual))+
labs( y = "Yield Level", title = "2 Year Residual") + scale_y_continuous(position = c("right")) + theme_bw()
Series_combind %>% ggplot(aes(x = Date)) + geom_line(aes(y = residual_2y)) + geom_line(aes(y = std_residual)) + geom_line(aes(y = -std_residual))+
labs( y = "Yield Level", title = "2 Year Residual") + scale_y_continuous(position = c("right")) + theme_bw()
Series_combind %>% ggplot(aes(x = Date)) + geom_line(aes(y = pred_2y,colour="Pred")) + geom_line(aes(y=USGG2YR.Index, colour="Actual")) +
labs( y = "Yield Level", title = "2 Year Yield Prediction vs Actual") + scale_y_continuous(breaks = seq(0, 8, by = 0.1), position = c("right")) + scale_colour_manual(name="Actual vs Pred", values = cols) +theme_bw()
Series_combind %>% ggplot(aes(x = Date)) + geom_line(aes(y = residual_2y)) + geom_line(aes(y = std_residual)) + geom_line(aes(y = -std_residual))+
labs( y = "Yield Level", title = "2 Year Residual") + scale_y_continuous(position = c("right")) + theme_bw()
Series_2016_rf %>% ggplot(aes(x = Date)) + geom_line(aes(y = pred_rf,colour="Pred")) + geom_line(aes(y=USGG2YR.Index, colour="Actual")) +
labs( y = "Yield Level", title = "2 Year Yield Prediction vs Actual") + scale_y_continuous(breaks = seq(0, 3.5, by = 0.1), position = c("right")) + scale_colour_manual(name="Actual vs Pred", values = cols) +theme_bw()
Series_combind %>% ggplot(aes(x = Date)) + geom_line(aes(y = pred_2y,colour="Pred")) + geom_line(aes(y=USGG2YR.Index, colour="Actual")) +
labs( y = "Yield Level", title = "2 Year Yield Prediction vs Actual") + scale_y_continuous(breaks = seq(0, 8, by = 0.1), position = c("right")) + scale_colour_manual(name="Actual vs Pred", values = cols) +theme_bw()
library(readxl)
library(Rblpapi)
library(TSA)
install.packages("TSA")
FDI_NSA = bdh("TISSTOTN Index","px_last",start.dt,end.dt)
library(TSA)
library(zoo)
blpConnect()
start.dt = as.Date("01/01/1970","%m/%d/%Y")
end.dt = as.Date("02/14/2017","%m/%d/%Y")
FDI_NSA = bdh("TISSTOTN Index","px_last",start.dt,end.dt)
p=periodogram(FDI_NSA[,1])
Tsy_Net = bdh("TISSTOTN Index","px_last",start.dt,end.dt)
Tsy_Net
library(timetk)
Tsy_Net
first(Tsy_Net$date)
floor_date(first(Tsy_Net$date))
decimal_date(floor_date(first(Tsy_Net$date)))
Tsy_Net = tk_ts(Tsy_Net$date,start=decimal_date(floor_date(first(Tsy_Net$date), 'months')), frequency=12)
Tsy_Net
fit <- stl(Tsy_Net, s.window = 7)
plot(elecequip, col="gray",
main="Treasury Monthly Supply Net",
ylab="", xlab="")
plot(Tsy_Net, col="gray",
main="Treasury Monthly Supply Net",
ylab="", xlab="")
lines(fit$time.series[,2],col="red",ylab="Trend")
Tsy_Net = bdh("TISSTOTN Index","px_last",start.dt,end.dt)
Tsy_Net
Tsy_Net = tk_ts(Tsy_Net$px_last,start=decimal_date(floor_date(first(Tsy_Net$date), 'months')), frequency=12)
fit <- stl(Tsy_Net, s.window = 7)
plot(Tsy_Net, col="gray",
main="Treasury Monthly Supply Net",
ylab="", xlab="")
lines(fit$time.series[,2],col="red",ylab="Trend")
plot(fit)
